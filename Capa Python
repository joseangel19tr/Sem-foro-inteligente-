import tkinter as tk
import serial
import threading
import time
from PIL import Image, ImageTk

# Configura tu puerto serial aquí
SERIAL_PORT = "COM6"  # Cambia esto si tu ESP32 está en otro puerto
BAUDRATE = 9600

class SemaforoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Control de Semáforo")

        # Intentar conectar al ESP32
        try:
            self.ser = serial.Serial(SERIAL_PORT, BAUDRATE, timeout=1)
            time.sleep(2)
        except Exception as e:
            self.ser = None
            print(f"No se pudo conectar al ESP32: {e}")

        # Etiqueta de estado
        self.estado = tk.Label(root, text="Estado: Apagado", font=("Arial", 14))
        self.estado.pack(pady=10)

        # Canvas para mostrar la imagen del semáforo
        self.canvas = tk.Canvas(root, width=200, height=400)
        self.canvas.pack(pady=10)

        # Cargar imágenes del semáforo
         # Reemplaza las rutas con la ubicación correcta de las imágenes en la carpeta 'img'
        self.img_verde = ImageTk.PhotoImage(Image.open(r"C:\Users\josea\OneDrive\Documentos\Tareas Uni\arquitectura soft\imgenes semaforo\semaforo verde.png").resize((200, 400)))
        self.img_amarillo = ImageTk.PhotoImage(Image.open(r"C:\Users\josea\OneDrive\Documentos\Tareas Uni\arquitectura soft\imgenes semaforo\semaforo amarillo.png").resize((200, 400)))
        self.img_rojo = ImageTk.PhotoImage(Image.open(r"C:\Users\josea\OneDrive\Documentos\Tareas Uni\arquitectura soft\imgenes semaforo\semaforo rojo.png").resize((200, 400)))
        self.img_apagado = ImageTk.PhotoImage(Image.open(r"C:\Users\josea\OneDrive\Documentos\Tareas Uni\arquitectura soft\imgenes semaforo\semaforo apagado.png").resize((200, 400)))
        # Mostrar imagen apagada al inicio
        self.semaforo_img = self.canvas.create_image(100, 200, image=self.img_apagado)

        # Botones de control manual
        frame_botones = tk.Frame(root)
        frame_botones.pack(pady=5)

        tk.Button(frame_botones, text="Encender Verde", bg="green", fg="white",
                  command=lambda: self.encender("verde")).grid(row=0, column=0, padx=5)
        tk.Button(frame_botones, text="Encender Amarillo", bg="yellow",
                  command=lambda: self.encender("amarillo")).grid(row=0, column=1, padx=5)
        tk.Button(frame_botones, text="Encender Rojo", bg="red", fg="white",
                  command=lambda: self.encender("rojo")).grid(row=0, column=2, padx=5)
        tk.Button(frame_botones, text="Apagar Todo", bg="gray", fg="white",
                  command=self.apagar).grid(row=1, column=0, columnspan=3, pady=5)

        # Sliders de tiempo
        frame_sliders = tk.Frame(root)
        frame_sliders.pack(pady=10)

        self.tiempo_verde = tk.IntVar(value=5)
        self.tiempo_amarillo = tk.IntVar(value=2)
        self.tiempo_rojo = tk.IntVar(value=5)

        tk.Label(frame_sliders, text="Tiempo Verde (s)").grid(row=0, column=0)
        tk.Scale(frame_sliders, from_=1, to=20, orient="horizontal",
                 variable=self.tiempo_verde).grid(row=1, column=0)

        tk.Label(frame_sliders, text="Tiempo Amarillo (s)").grid(row=0, column=1)
        tk.Scale(frame_sliders, from_=1, to=10, orient="horizontal",
                 variable=self.tiempo_amarillo).grid(row=1, column=1)

        tk.Label(frame_sliders, text="Tiempo Rojo (s)").grid(row=0, column=2)
        tk.Scale(frame_sliders, from_=1, to=20, orient="horizontal",
                 variable=self.tiempo_rojo).grid(row=1, column=2)

        # Botones de rutina automática
        frame_rutina = tk.Frame(root)
        frame_rutina.pack(pady=10)

        tk.Button(frame_rutina, text="Iniciar Rutina", bg="blue", fg="white",
                  command=self.iniciar_rutina).grid(row=0, column=0, padx=10)
        tk.Button(frame_rutina, text="Detener Rutina", bg="black", fg="white",
                  command=self.detener_rutina).grid(row=0, column=1, padx=10)

        self.rutina_activa = False

    def encender(self, color):
        self.apagar()  # Apaga todo antes de encender
        self.estado.config(text=f"Estado: {color.upper()} encendido")

        # Cambiar la imagen del semáforo
        if color == "verde":
            self.canvas.itemconfig(self.semaforo_img, image=self.img_verde)
        elif color == "amarillo":
            self.canvas.itemconfig(self.semaforo_img, image=self.img_amarillo)
        elif color == "rojo":
            self.canvas.itemconfig(self.semaforo_img, image=self.img_rojo)

        if self.ser:
            self.ser.write(f"{color}:1\n".encode())

    def apagar(self):
        self.estado.config(text="Estado: Apagado")
        self.canvas.itemconfig(self.semaforo_img, image=self.img_apagado)
        if self.ser:
            for color in ["rojo", "amarillo", "verde"]:
                self.ser.write(f"{color}:0\n".encode())

    def iniciar_rutina(self):
        if not self.rutina_activa:
            self.rutina_activa = True
            threading.Thread(target=self.ejecutar_rutina, daemon=True).start()

    def detener_rutina(self):
        self.rutina_activa = False
        self.estado.config(text="Estado: Rutina detenida")
        self.apagar()

    def ejecutar_rutina(self):
        while self.rutina_activa:
            self.encender("verde")
            time.sleep(self.tiempo_verde.get())

            self.encender("amarillo")
            time.sleep(self.tiempo_amarillo.get())

            self.encender("rojo")
            time.sleep(self.tiempo_rojo.get())

            self.apagar()
            time.sleep(1)

# Ejecutar la interfaz
if __name__ == "__main__":
    root = tk.Tk()
    app = SemaforoApp(root)
    root.mainloop()
